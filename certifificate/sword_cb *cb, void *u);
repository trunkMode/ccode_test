PEM_READ_BIO_PRIVATEKEY(3)                                    OpenSSL                                    PEM_READ_BIO_PRIVATEKEY(3)

[1mNAME[0m
       pem_password_cb, PEM_read_bio_PrivateKey, PEM_read_PrivateKey, PEM_write_bio_PrivateKey,
       PEM_write_bio_PrivateKey_traditional, PEM_write_PrivateKey, PEM_write_bio_PKCS8PrivateKey, PEM_write_PKCS8PrivateKey,
       PEM_write_bio_PKCS8PrivateKey_nid, PEM_write_PKCS8PrivateKey_nid, PEM_read_bio_PUBKEY, PEM_read_PUBKEY,
       PEM_write_bio_PUBKEY, PEM_write_PUBKEY, PEM_read_bio_RSAPrivateKey, PEM_read_RSAPrivateKey, PEM_write_bio_RSAPrivateKey,
       PEM_write_RSAPrivateKey, PEM_read_bio_RSAPublicKey, PEM_read_RSAPublicKey, PEM_write_bio_RSAPublicKey,
       PEM_write_RSAPublicKey, PEM_read_bio_RSA_PUBKEY, PEM_read_RSA_PUBKEY, PEM_write_bio_RSA_PUBKEY, PEM_write_RSA_PUBKEY,
       PEM_read_bio_DSAPrivateKey, PEM_read_DSAPrivateKey, PEM_write_bio_DSAPrivateKey, PEM_write_DSAPrivateKey,
       PEM_read_bio_DSA_PUBKEY, PEM_read_DSA_PUBKEY, PEM_write_bio_DSA_PUBKEY, PEM_write_DSA_PUBKEY, PEM_read_bio_Parameters,
       PEM_write_bio_Parameters, PEM_read_bio_DSAparams, PEM_read_DSAparams, PEM_write_bio_DSAparams, PEM_write_DSAparams,
       PEM_read_bio_DHparams, PEM_read_DHparams, PEM_write_bio_DHparams, PEM_write_DHparams, PEM_read_bio_X509, PEM_read_X509,
       PEM_write_bio_X509, PEM_write_X509, PEM_read_bio_X509_AUX, PEM_read_X509_AUX, PEM_write_bio_X509_AUX, PEM_write_X509_AUX,
       PEM_read_bio_X509_REQ, PEM_read_X509_REQ, PEM_write_bio_X509_REQ, PEM_write_X509_REQ, PEM_write_bio_X509_REQ_NEW,
       PEM_write_X509_REQ_NEW, PEM_read_bio_X509_CRL, PEM_read_X509_CRL, PEM_write_bio_X509_CRL, PEM_write_X509_CRL,
       PEM_read_bio_PKCS7, PEM_read_PKCS7, PEM_write_bio_PKCS7, PEM_write_PKCS7 - PEM routines

[1mSYNOPSIS[0m
        #include <openssl/pem.h>

        typedef int pem_password_cb(char *buf, int size, int rwflag, void *u);

        EVP_PKEY *PEM_read_bio_PrivateKey(BIO *bp, EVP_PKEY **x,
                                          pem_password_cb *cb, void *u);
        EVP_PKEY *PEM_read_PrivateKey(FILE *fp, EVP_PKEY **x,
                                      pem_password_cb *cb, void *u);
        int PEM_write_bio_PrivateKey(BIO *bp, EVP_PKEY *x, const EVP_CIPHER *enc,
                                     unsigned char *kstr, int klen,
                                     pem_password_cb *cb, void *u);
        int PEM_write_bio_PrivateKey_traditional(BIO *bp, EVP_PKEY *x,
                                                 const EVP_CIPHER *enc,
                                                 unsigned char *kstr, int klen,
                                                 pem_password_cb *cb, void *u);
        int PEM_write_PrivateKey(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc,
                                 unsigned char *kstr, int klen,
                                 pem_password_cb *cb, void *u);

        int PEM_write_bio_PKCS8PrivateKey(BIO *bp, EVP_PKEY *x, const EVP_CIPHER *enc,
                                          char *kstr, int klen,
                                          pem_password_cb *cb, void *u);
        int PEM_write_PKCS8PrivateKey(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc,
                                      char *kstr, int klen,
                                      pem_password_cb *cb, void *u);
        int PEM_write_bio_PKCS8PrivateKey_nid(BIO *bp, EVP_PKEY *x, int nid,
                                              char *kstr, int klen,
                                              pem_password_cb *cb, void *u);
        int PEM_write_PKCS8PrivateKey_nid(FILE *fp, EVP_PKEY *x, int nid,
                                          char *kstr, int klen,
                                          pem_password_cb *cb, void *u);

        EVP_PKEY *PEM_read_bio_PUBKEY(BIO *bp, EVP_PKEY **x,
                                      pem_password_cb *cb, void *u);
        EVP_PKEY *PEM_read_PUBKEY(FILE *fp, EVP_PKEY **x,
                                  pem_password_cb *cb, void *u);
        int PEM_write_bio_PUBKEY(BIO *bp, EVP_PKEY *x);
        int PEM_write_PUBKEY(FILE *fp, EVP_PKEY *x);

        RSA *PEM_read_bio_RSAPrivateKey(BIO *bp, RSA **x,
                                        pem_password_cb *cb, void *u);
        RSA *PEM_read_RSAPrivateKey(FILE *fp, RSA **x,
                                    pem_password_cb *cb, void *u);
        int PEM_write_bio_RSAPrivateKey(BIO *bp, RSA *x, const EVP_CIPHER *enc,
                                        unsigned char *kstr, int klen,
                                        pem_password_cb *cb, void *u);
        int PEM_write_RSAPrivateKey(FILE *fp, RSA *x, const EVP_CIPHER *enc,
                                    unsigned char *kstr, int klen,
                                    pem_password_cb *cb, void *u);

        RSA *PEM_read_bio_RSAPublicKey(BIO *bp, RSA **x,
                                       pem_password_cb *cb, void *u);
        RSA *PEM_read_RSAPublicKey(FILE *fp, RSA **x,
                                   pem_password_cb *cb, void *u);
        int PEM_write_bio_RSAPublicKey(BIO *bp, RSA *x);
        int PEM_write_RSAPublicKey(FILE *fp, RSA *x);

        RSA *PEM_read_bio_RSA_PUBKEY(BIO *bp, RSA **x,
                                     pem_password_cb *cb, void *u);
        RSA *PEM_read_RSA_PUBKEY(FILE *fp, RSA **x,
                                 pem_password_cb *cb, void *u);
        int PEM_write_bio_RSA_PUBKEY(BIO *bp, RSA *x);
        int PEM_write_RSA_PUBKEY(FILE *fp, RSA *x);

        DSA *PEM_read_bio_DSAPrivateKey(BIO *bp, DSA **x,
                                        pem_password_cb *cb, void *u);
        DSA *PEM_read_DSAPrivateKey(FILE *fp, DSA **x,
                                    pem_password_cb *cb, void *u);
        int PEM_write_bio_DSAPrivateKey(BIO *bp, DSA *x, const EVP_CIPHER *enc,
                                        unsigned char *kstr, int klen,
                                        pem_password_cb *cb, void *u);
        int PEM_write_DSAPrivateKey(FILE *fp, DSA *x, const EVP_CIPHER *enc,
                                    unsigned char *kstr, int klen,
                                    pem_password_cb *cb, void *u);

        DSA *PEM_read_bio_DSA_PUBKEY(BIO *bp, DSA **x,
                                     pem_password_cb *cb, void *u);
        DSA *PEM_read_DSA_PUBKEY(FILE *fp, DSA **x,
                                 pem_password_cb *cb, void *u);
        int PEM_write_bio_DSA_PUBKEY(BIO *bp, DSA *x);
        int PEM_write_DSA_PUBKEY(FILE *fp, DSA *x);

        EVP_PKEY *PEM_read_bio_Parameters(BIO *bp, EVP_PKEY **x);
        int PEM_write_bio_Parameters(BIO *bp, const EVP_PKEY *x);

        DSA *PEM_read_bio_DSAparams(BIO *bp, DSA **x, pem_password_cb *cb, void *u);
        DSA *PEM_read_DSAparams(FILE *fp, DSA **x, pem_password_cb *cb, void *u);
        int PEM_write_bio_DSAparams(BIO *bp, DSA *x);
        int PEM_write_DSAparams(FILE *fp, DSA *x);

        DH *PEM_read_bio_DHparams(BIO *bp, DH **x, pem_password_cb *cb, void *u);
        DH *PEM_read_DHparams(FILE *fp, DH **x, pem_password_cb *cb, void *u);
        int PEM_write_bio_DHparams(BIO *bp, DH *x);
        int PEM_write_DHparams(FILE *fp, DH *x);

        X509 *PEM_read_bio_X509(BIO *bp, X509 **x, pem_password_cb *cb, void *u);
        X509 *PEM_read_X509(FILE *fp, X509 **x, pem_password_cb *cb, void *u);
        int PEM_write_bio_X509(BIO *bp, X509 *x);
        int PEM_write_X509(FILE *fp, X509 *x);

        X509 *PEM_read_bio_X509_AUX(BIO *bp, X509 **x, pem_password_cb *cb, void *u);
        X509 *PEM_read_X509_AUX(FILE *fp, X509 **x, pem_password_cb *cb, void *u);
        int PEM_write_bio_X509_AUX(BIO *bp, X509 *x);
        int PEM_write_X509_AUX(FILE *fp, X509 *x);

        X509_REQ *PEM_read_bio_X509_REQ(BIO *bp, X509_REQ **x,
                                        pem_password_cb *cb, void *u);
        X509_REQ *PEM_read_X509_REQ(FILE *fp, X509_REQ **x,
                                    pem_password_cb *cb, void *u);
        int PEM_write_bio_X509_REQ(BIO *bp, X509_REQ *x);
        int PEM_write_X509_REQ(FILE *fp, X509_REQ *x);
        int PEM_write_bio_X509_REQ_NEW(BIO *bp, X509_REQ *x);
        int PEM_write_X509_REQ_NEW(FILE *fp, X509_REQ *x);

        X509_CRL *PEM_read_bio_X509_CRL(BIO *bp, X509_CRL **x,
                                        pem_password_cb *cb, void *u);
        X509_CRL *PEM_read_X509_CRL(FILE *fp, X509_CRL **x,
                                    pem_password_cb *cb, void *u);
        int PEM_write_bio_X509_CRL(BIO *bp, X509_CRL *x);
        int PEM_write_X509_CRL(FILE *fp, X509_CRL *x);

        PKCS7 *PEM_read_bio_PKCS7(BIO *bp, PKCS7 **x, pem_password_cb *cb, void *u);
        PKCS7 *PEM_read_PKCS7(FILE *fp, PKCS7 **x, pem_password_cb *cb, void *u);
        int PEM_write_bio_PKCS7(BIO *bp, PKCS7 *x);
        int PEM_write_PKCS7(FILE *fp, PKCS7 *x);

[1mDESCRIPTION[0m
       The PEM functions read or write structures in PEM format. In this sense PEM format is simply base64 encoded data surrounded
       by header lines.

       For more details about the meaning of arguments see the [1mPEM FUNCTION ARGUMENTS [22msection.

       Each operation has four functions associated with it. For brevity the term "[1mTYPE [22mfunctions" will be used below to
       collectively refer to the [1mPEM_read_bio_TYPE()[22m, [1mPEM_read_TYPE()[22m, [1mPEM_write_bio_TYPE()[22m, and [1mPEM_write_TYPE() [22mfunctions.

       The [1mPrivateKey [22mfunctions read or write a private key in PEM format using an EVP_PKEY structure. The write routines use
       PKCS#8 private key format and are equivalent to [1mPEM_write_bio_PKCS8PrivateKey()[22m.The read functions transparently handle
       traditional and PKCS#8 format encrypted and unencrypted keys.

       [1mPEM_write_bio_PrivateKey_traditional() [22mwrites out a private key in the "traditional" format with a simple private key marker
       and should only be used for compatibility with legacy programs.

       [1mPEM_write_bio_PKCS8PrivateKey() [22mand [1mPEM_write_PKCS8PrivateKey() [22mwrite a private key in an EVP_PKEY structure in PKCS#8
       EncryptedPrivateKeyInfo format using PKCS#5 v2.0 password based encryption algorithms. The [1mcipher [22margument specifies the
       encryption algorithm to use: unlike some other PEM routines the encryption is applied at the PKCS#8 level and not in the PEM
       headers. If [1mcipher [22mis NULL then no encryption is used and a PKCS#8 PrivateKeyInfo structure is used instead.

       [1mPEM_write_bio_PKCS8PrivateKey_nid() [22mand [1mPEM_write_PKCS8PrivateKey_nid() [22malso write out a private key as a PKCS#8
       EncryptedPrivateKeyInfo however it uses PKCS#5 v1.5 or PKCS#12 encryption algorithms instead. The algorithm to use is
       specified in the [1mnid [22mparameter and should be the NID of the corresponding OBJECT IDENTIFIER (see NOTES section).

       The [1mPUBKEY [22mfunctions process a public key using an EVP_PKEY structure. The public key is encoded as a SubjectPublicKeyInfo
       structure.

       The [1mRSAPrivateKey [22mfunctions process an RSA private key using an RSA structure. The write routines uses traditional format.
       The read routines handles the same formats as the [1mPrivateKey [22mfunctions but an error occurs if the private key is not RSA.

       The [1mRSAPublicKey [22mfunctions process an RSA public key using an RSA structure. The public key is encoded using a PKCS#1
       RSAPublicKey structure.

       The [1mRSA_PUBKEY [22mfunctions also process an RSA public key using an RSA structure. However the public key is encoded using a
       SubjectPublicKeyInfo structure and an error occurs if the public key is not RSA.

       The [1mDSAPrivateKey [22mfunctions process a DSA private key using a DSA structure. The write routines uses traditional format. The
       read routines handles the same formats as the [1mPrivateKey [22mfunctions but an error occurs if the private key is not DSA.

       The [1mDSA_PUBKEY [22mfunctions process a DSA public key using a DSA structure. The public key is encoded using a
       SubjectPublicKeyInfo structure and an error occurs if the public key is not DSA.

       The [1mParameters [22mfunctions read or write key parameters in PEM format using an EVP_PKEY structure.  The encoding depends on
       the type of key; for DSA key parameters, it will be a Dss-Parms structure as defined in RFC2459, and for DH key parameters,
       it will be a PKCS#3 DHparameter structure.  [4mThese[24m [4mfunctions[24m [4monly[24m [4mexist[24m [4mfor[24m [4mthe[24m [4m[1mBIO[24m [4m[22mtype[24m.

       The [1mDSAparams [22mfunctions process DSA parameters using a DSA structure. The parameters are encoded using a Dss-Parms structure
       as defined in RFC2459.

       The [1mDHparams [22mfunctions process DH parameters using a DH structure. The parameters are encoded using a PKCS#3 DHparameter
       structure.

       The [1mX509 [22mfunctions process an X509 certificate using an X509 structure. They will also process a trusted X509 certificate
       but any trust settings are discarded.

       The [1mX509_AUX [22mfunctions process a trusted X509 certificate using an X509 structure.

       The [1mX509_REQ [22mand [1mX509_REQ_NEW [22mfunctions process a PKCS#10 certificate request using an X509_REQ structure. The [1mX509_REQ[0m
       write functions use [1mCERTIFICATE REQUEST [22min the header whereas the [1mX509_REQ_NEW [22mfunctions use [1mNEW CERTIFICATE REQUEST [22m(as
       required by some CAs). The [1mX509_REQ [22mread functions will handle either form so there are no [1mX509_REQ_NEW [22mread functions.

       The [1mX509_CRL [22mfunctions process an X509 CRL using an X509_CRL structure.

       The [1mPKCS7 [22mfunctions process a PKCS#7 ContentInfo using a PKCS7 structure.

[1mPEM FUNCTION ARGUMENTS[0m
       The PEM functions have many common arguments.

       The [1mbp [22mBIO parameter (if present) specifies the BIO to read from or write to.

       The [1mfp [22mFILE parameter (if present) specifies the FILE pointer to read from or write to.

       The PEM read functions all take an argument [1mTYPE **x [22mand return a [1mTYPE * [22mpointer. Where [1mTYPE [22mis whatever structure the
       function uses. If [1mx [22mis NULL then the parameter is ignored. If [1mx [22mis not NULL but [1m*x [22mis NULL then the structure returned will
       be written to [1m*x[22m. If neither [1mx [22mnor [1m*x [22mis NULL then an attempt is made to reuse the structure at [1m*x [22m(but see BUGS and
       EXAMPLES sections).  Irrespective of the value of [1mx [22ma pointer to the structure is always returned (or NULL if an error
       occurred).

       The PEM functions which write private keys take an [1menc [22mparameter which specifies the encryption algorithm to use, encryption
       is done at the PEM level. If this parameter is set to NULL then the private key is written in unencrypted form.

       The [1mcb [22margument is the callback to use when querying for the pass phrase used for encrypted PEM structures (normally only
       private keys).

       For the PEM write routines if the [1mkstr [22mparameter is not NULL then [1mklen [22mbytes at [1mkstr [22mare used as the passphrase and [1mcb [22mis
       ignored.

       If the [1mcb [22mparameters is set to NULL and the [1mu [22mparameter is not NULL then the [1mu [22mparameter is interpreted as a null terminated
       string to use as the passphrase. If both [1mcb [22mand [1mu [22mare NULL then the default callback routine is used which will typically
       prompt for the passphrase on the current terminal with echoing turned off.

       The default passphrase callback is sometimes inappropriate (for example in a GUI application) so an alternative can be
       supplied. The callback routine has the following form:

        int cb(char *buf, int size, int rwflag, void *u);

       [1mbuf [22mis the buffer to write the passphrase to. [1msize [22mis the maximum length of the passphrase (i.e. the size of buf). [1mrwflag [22mis
       a flag which is set to 0 when reading and 1 when writing. A typical routine will ask the user to verify the passphrase (for
       example by prompting for it twice) if [1mrwflag [22mis 1. The [1mu [22mparameter has the same value as the [1mu [22mparameter passed to the PEM
       routine. It allows arbitrary data to be passed to the callback by the application (for example a window handle in a GUI
       application). The callback [1mmust [22mreturn the number of characters in the passphrase or -1 if an error occurred.

[1mNOTES[0m
       The old [1mPrivateKey [22mwrite routines are retained for compatibility.  New applications should write private keys using the
       [1mPEM_write_bio_PKCS8PrivateKey() [22mor [1mPEM_write_PKCS8PrivateKey() [22mroutines because they are more secure (they use an iteration
       count of 2048 whereas the traditional routines use a count of 1) unless compatibility with older versions of OpenSSL is
       important.

       The [1mPrivateKey [22mread routines can be used in all applications because they handle all formats transparently.

       A frequent cause of problems is attempting to use the PEM routines like this:

        X509 *x;

        PEM_read_bio_X509(bp, &x, 0, NULL);

       this is a bug because an attempt will be made to reuse the data at [1mx [22mwhich is an uninitialised pointer.

       These functions make no assumption regarding the pass phrase received from the password callback.  It will simply be treated
       as a byte sequence.

[1mPEM ENCRYPTION FORMAT[0m
       These old [1mPrivateKey [22mroutines use a non standard technique for encryption.

       The private key (or other data) takes the following form:

        -----BEGIN RSA PRIVATE KEY-----
        Proc-Type: 4,ENCRYPTED
        DEK-Info: DES-EDE3-CBC,3F17F5316E2BAC89

        ...base64 encoded data...
        -----END RSA PRIVATE KEY-----

       The line beginning with [4mProc-Type[24m contains the version and the protection on the encapsulated data. The line beginning [4mDEK-[0m
       [4mInfo[24m contains two comma separated values: the encryption algorithm name as used by [1mEVP_get_cipherbyname() [22mand an
       initialization vector used by the cipher encoded as a set of hexadecimal digits. After those two lines is the base64-encoded
       encrypted data.

       The encryption key is derived using [1mEVP_BytesToKey()[22m. The cipher's initialization vector is passed to [1mEVP_BytesToKey() [22mas
       the [1msalt [22mparameter. Internally, [1mPKCS5_SALT_LEN [22mbytes of the salt are used (regardless of the size of the initialization
       vector). The user's password is passed to [1mEVP_BytesToKey() [22musing the [1mdata [22mand [1mdatal [22mparameters. Finally, the library uses an
       iteration count of 1 for [1mEVP_BytesToKey()[22m.

       The [1mkey [22mderived by [1mEVP_BytesToKey() [22malong with the original initialization vector is then used to decrypt the encrypted
       data. The [1miv [22mproduced by [1mEVP_BytesToKey() [22mis not utilized or needed, and NULL should be passed to the function.

       The pseudo code to derive the key would look similar to:

        EVP_CIPHER* cipher = EVP_des_ede3_cbc();
        EVP_MD* md = EVP_md5();

        unsigned int nkey = EVP_CIPHER_key_length(cipher);
        unsigned int niv = EVP_CIPHER_iv_length(cipher);
        unsigned char key[nkey];
        unsigned char iv[niv];

        memcpy(iv, HexToBin("3F17F5316E2BAC89"), niv);
        rc = EVP_BytesToKey(cipher, md, iv /*salt*/, pword, plen, 1, key, NULL /*iv*/);
        if (rc != nkey)
            /* Error */

        /* On success, use key and iv to initialize the cipher */

[1mBUGS[0m
       The PEM read routines in some versions of OpenSSL will not correctly reuse an existing structure. Therefore the following:

        PEM_read_bio_X509(bp, &x, 0, NULL);

       where [1mx [22malready contains a valid certificate, may not work, whereas:

        X509_free(x);
        x = PEM_read_bio_X509(bp, NULL, 0, NULL);

       is guaranteed to work.

[1mRETURN VALUES[0m
       The read routines return either a pointer to the structure read or NULL if an error occurred.

       The write routines return 1 for success or 0 for failure.

[1mEXAMPLES[0m
       Although the PEM routines take several arguments in almost all applications most of them are set to 0 or NULL.

       Read a certificate in PEM format from a BIO:

        X509 *x;

        x = PEM_read_bio_X509(bp, NULL, 0, NULL);
        if (x == NULL)
            /* Error */

       Alternative method:

        X509 *x = NULL;

        if (!PEM_read_bio_X509(bp, &x, 0, NULL))
            /* Error */

       Write a certificate to a BIO:

        if (!PEM_write_bio_X509(bp, x))
            /* Error */

       Write a private key (using traditional format) to a BIO using triple DES encryption, the pass phrase is prompted for:

        if (!PEM_write_bio_PrivateKey(bp, key, EVP_des_ede3_cbc(), NULL, 0, 0, NULL))
            /* Error */

       Write a private key (using PKCS#8 format) to a BIO using triple DES encryption, using the pass phrase "hello":

        if (!PEM_write_bio_PKCS8PrivateKey(bp, key, EVP_des_ede3_cbc(),
                                           NULL, 0, 0, "hello"))
            /* Error */

       Read a private key from a BIO using a pass phrase callback:

        key = PEM_read_bio_PrivateKey(bp, NULL, pass_cb, "My Private Key");
        if (key == NULL)
            /* Error */

       Skeleton pass phrase callback:

        int pass_cb(char *buf, int size, int rwflag, void *u)
        {

            /* We'd probably do something else if 'rwflag' is 1 */
            printf("Enter pass phrase for \"%s\"\n", (char *)u);

            /* get pass phrase, length 'len' into 'tmp' */
            char *tmp = "hello";
            if (tmp == NULL) /* An error occurred */
                return -1;

            size_t len = strlen(tmp);

            if (len > size)
                len = size;
            memcpy(buf, tmp, len);
            return len;
        }

[1mSEE ALSO[0m
       [1mEVP_EncryptInit[22m(3), [1mEVP_BytesToKey[22m(3), [1mpassphrase-encoding[22m(7)

[1mHISTORY[0m
       The old Netscape certificate sequences were no longer documented in OpenSSL 1.1.0; applications should use the PKCS7
       standard instead as they will be formally deprecated in a future releases.

[1mCOPYRIGHT[0m
       Copyright 2001-2019 The OpenSSL Project Authors. All Rights Reserved.

       Licensed under the OpenSSL license (the "License").  You may not use this file except in compliance with the License.  You
       can obtain a copy in the file LICENSE in the source distribution or at <https://www.openssl.org/source/license.html>.

1.1.1g                                                       2020-04-23                                  PEM_READ_BIO_PRIVATEKEY(3)
